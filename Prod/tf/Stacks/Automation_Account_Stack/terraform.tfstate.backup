{
    "version": 3,
    "terraform_version": "0.11.8",
    "serial": 2,
    "lineage": "be1265ea-24bb-660e-9c0e-8abebd6b754b",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "Action_Group"
            ],
            "outputs": {},
            "resources": {
                "null_resource.Action_Group_and_Webhook": {
                    "type": "null_resource",
                    "depends_on": [
                        "local.powershell_interpreter",
                        "local.short_name"
                    ],
                    "primary": {
                        "id": "6233819609432665585",
                        "attributes": {
                            "id": "6233819609432665585"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "Automation_Account"
            ],
            "outputs": {
                "automation_account_name": {
                    "sensitive": false,
                    "type": "string",
                    "value": "sm-tf-tagging-test1-aa"
                }
            },
            "resources": {
                "azurerm_automation_account.aut-acc": {
                    "type": "azurerm_automation_account",
                    "depends_on": [
                        "local.powershell_interpreter"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa",
                        "attributes": {
                            "dsc_primary_access_key": "cYGB3wjMdifEJOIRi/i7K2V/W2DPOPpWeIaRBI3BwLvCQOCUqL9OcNlujxqnTwetMfm+3KTwP1j1DcMRJNm76Q==",
                            "dsc_secondary_access_key": "FAMN8iU/T3dIEHxiLgVkjL3hqu5CejtUlHIg3xHK0HAV72v9VMtk233mZBugbb8gmTLyP+e7qspy+FWsa1CuWA==",
                            "dsc_server_endpoint": "https://we-agentservice-prod-1.azure-automation.net/accounts/1f56debc-c51e-40cc-90c3-8ff29122170c",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa",
                            "location": "westeurope",
                            "name": "sm-tf-tagging-test1-aa",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "sku.#": "1",
                            "sku.0.name": "Basic",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "LogicApp"
            ],
            "outputs": {},
            "resources": {
                "data.azurerm_resource_group.base": {
                    "type": "azurerm_resource_group",
                    "depends_on": [],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1",
                        "attributes": {
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1",
                            "location": "westeurope",
                            "name": "sm-tf-tagging-test1",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "tags"
            ],
            "outputs": {
                "tags": {
                    "sensitive": false,
                    "type": "map",
                    "value": {
                        "automation": "workinghours=0700-2000 MON-FRI:expiry=none",
                        "bpcid": "FG111",
                        "business": "brand=:project=:owner=:financecontact=:criticality=",
                        "coreops": "support=no:backup=0000UTC:patching=0300UTC",
                        "metrics": "*",
                        "security": "dataclassification=internal:pii=no",
                        "technical": "environment=development"
                    }
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "Automation_Account",
                "Failover_Runbook"
            ],
            "outputs": {},
            "resources": {
                "azurerm_automation_runbook.failover_runbook": {
                    "type": "azurerm_automation_runbook",
                    "depends_on": [
                        "data.local_file.failover_script"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/failover_runbook",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "content": "[OutputType(\"PSAzureOperationResponse\")]\r\n\r\nparam\r\n(\r\n    [Parameter (Mandatory=$false)]\r\n    [object] $WebhookData\r\n)\r\n\r\n#region Auto-Generated DO NOT EDIT\r\n$ErrorActionPreference = \"stop\"\r\n\r\nif ($WebhookData)\r\n{\r\n   # Get the data object from WebhookData.\r\n    $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)\r\n    $WebhookName = $WebhookData.WebhookName\r\n    $AlertContext = [object] ($WebhookBody.data).context\r\n    $ResourceName = $AlertContext.resourceName\r\n    $ResourceType = $AlertContext.resourceType\r\n    $ResourceGroupName = $AlertContext.resourceGroupName\r\n    $SubId = $AlertContext.subscriptionId\r\n    $ResourceName = $AlertContext.resourceName\r\n    Write-Verbose \"resourceType: $ResourceType, resourceName: $ResourceName, resourceGroupName: $ResourceGroupName, subscriptionId: $SubId\" -Verbose\r\n\r\n    $ConnectionAssetName = \"AzureRunAsConnection\"\r\n    $Conn = Get-AutomationConnection -Name $ConnectionAssetName\r\n    if ($Conn -eq $null)\r\n    {\r\n        throw \"Could not retrieve connection asset: $ConnectionAssetName. Check that this asset exists in the Automation account.\"\r\n    }\r\n    Write-Output \"Authenticating to Azure with service principal and setting subscription to $SubId.\" -Verbose\r\n    Connect-AzureRmAccount -ServicePrincipal -Tenant $Conn.TenantID -ApplicationId $Conn.ApplicationID -CertificateThumbprint $Conn.CertificateThumbprint | Write-Verbose\r\n    Set-AzureRmContext -SubscriptionId $SubId -ErrorAction Stop | Write-Verbose\r\n}\r\nelse {\r\n   # Error\r\n    Write-Error \"This runbook is meant to be started from an Azure alert webhook only.\"\r\n}\r\n#endregion\r\n\r\n$currJobId = $PsPrivateMetaData.JobId.Guid\r\nWrite-Verbose \"Current Job ID: $currJobId\"\r\n\r\n# Initiliase the function to retrieve current automation account information\r\nfunction Get-CurrentAutomationAccount () {\r\n\r\n    Param (\r\n        $Runbook,\r\n        $currJobId\r\n    )\r\n\r\n    $MatchingRunbooks = (Get-AzureRmResource -ResourceType Microsoft.Automation/automationAccounts/runbooks) | where {$_.Name -match \"$Runbook\"}\r\n    \r\n\r\n\r\n    foreach($MatchingRunbook in $MatchingRunbooks)\r\n    {\r\n        $automationAccountName = $MatchingRunbook.Name.Split(\"/\")[0]\r\n\r\n        $jobs = Get-AzureRmAutomationJob -ResourceGroupName $MatchingRunbook.ResourceGroupName -AutomationAccountName $automationAccountName -Status Running\r\n\r\n        Foreach($job in $jobs)\r\n        {\r\n            if($job.JobId -eq $currJobId)\r\n            {\r\n                Write-Output 'Found the current automation account details, use $CurrentAutomationAccount to access its properties.'\r\n                return (Get-AzureRmAutomationAccount -ResourceGroupName $MatchingRunbook.ResourceGroupName -AutomationAccountName $automationAccountName)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n# Call the function to get current automation account information, filtering based on runbook name.\r\n\r\nWrite-Output \"Getting information about the current automation account...\"\r\n\r\ntry{\r\n$CurrentAutomationAccount = Get-CurrentAutomationAccount -currJobId $currJobId -Runbook \"failover_runbook\"\r\n\r\n$CurrentAutomationAccountName = $CurrentAutomationAccount.AutomationAccountName\r\n$CurrentAutomationAccounutResourceGroup =  $CurrentAutomationAccount.ResourceGroupName\r\n\r\nWrite-Output \"   --\u003e This is $CurrentAutomationAccountName in resource group $CurrentAutomationAccounutResourceGroup\"\r\n}\r\ncatch {\r\n    Write-error \"Failed to get current automation account information. Check the deployed failover runbook is called 'failover_runbook'\"\r\n}\r\n\r\n#Get-AzureRmAutomationJob only returns the input parameters when JOB id's includes\r\n$jobIds = (Get-AzureRmAutomationJob -ResourceGroupName $CurrentAutomationAccounutResourceGroup -RunbookName \"failover_runbook\" -AutomationAccountName $CurrentAutomationAccountName| where {($_.StartTime -gt ((Get-Date).AddHours(-1))) -and ($_.JobId -ne $currJobId)}).JobId\r\nif($jobIds.count -gt 0){\r\n    foreach($jobid in $jobIds){\r\n        $job = Get-AzureRmAutomationJob -ResourceGroupName $CurrentAutomationAccounutResourceGroup -AutomationAccountName $CurrentAutomationAccountName -JobId $jobid\r\n        $vmInJob = ($job.JobParameters.webhookData.RequestBody | ConvertFrom-Json).data.context.resourceName\r\n\r\n        if($vmInJob -eq $ResourceName){\r\n            switch ($job.Status){\r\n                \"Completed\"{\r\n                    Write-Output \"$vmInJob has already failed over, exiting...\"\r\n                    Exit 0\r\n                    break\r\n                }\r\n                \"Running\"{\r\n                    Write-Output \"Failover job for $vmInJob in progress\"\r\n                    Exit 0\r\n                    break\r\n                }\r\n                Default{\r\n                    Write-Output \"Starting VM failover...\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n$agval = (Get-AzureRmActionGroup -ResourceGroupName $ResourceGroupName -WarningAction Ignore | Where-Object {$_.WebhookReceivers.name -eq $WebhookName}).Name\r\n\r\n\r\n### json for enroling a VM in monitoring\r\n$armjson =@' \r\n{\r\n    \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {},\r\n    \"variables\": {},\r\n    \"resources\": [\r\n        {\r\n            \"name\": \"ALERTNAME\",\r\n            \"type\": \"Microsoft.Insights/metricAlerts\",\r\n            \"location\": \"global\",\r\n            \"apiVersion\": \"2018-03-01\",\r\n            \"tags\": {},\r\n            \"properties\": {\r\n                \"description\": \"Auto-failover alert\",\r\n                \"severity\": \"3\",\r\n                \"enabled\": \"ENVARVAL\",\r\n                \"scopes\": [\"VMID01\"],\r\n                \"evaluationFrequency\":\"PT1M\",\r\n                \"windowSize\": \"PT5M\",\r\n                \"criteria\": {\r\n                    \"odata.type\": \"Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria\",\r\n                    \"allOf\": [\r\n                        {\r\n                            \"name\" : \"1st criterion\",\r\n                            \"metricName\": \"Network Out\",\r\n                            \"dimensions\":[],\r\n                            \"operator\": \"LessThan\",\r\n                            \"threshold\" : \"1000\",\r\n                            \"timeAggregation\": \"Total\"\r\n                        }\r\n                    ]\r\n                },\r\n                \"actions\": [\r\n                    {\r\n                        \"actionGroupId\": \"AGID01\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n'@\r\n\r\n#name of the faild VM\r\n$vmName = $ResourceName\r\n$vmRG = $ResourceGroupName\r\n$alertname = ($AlertContext.Name)\r\n\r\n### disable old VM monitoring\r\nWrite-Output \"Getting VM details for vm $vmName and action group $agval in resource group $vmRG...\"\r\n\r\ntry{\r\n    $oldVM = Get-AzureRmVM -name $vmName -resourceGroupName $vmRG\r\n\r\n    $agid= Get-AzureRmActionGroup | where {$_.name -like \"$agval\"}\r\n    $agid = $agid | Select-Object -First 1 \r\n    $agname = $agid.id\r\n\r\n    Write-Output \"   --\u003e Done\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to retrieve information about VM $vmName or action group $agval\"\r\n}\r\n\r\n$scopearm = $armjson -replace \"VMID01\",$oldVM.id\r\n$scopearm = $scopearm -replace \"ENVARVAL\", \"false\"\r\n$finalarm = $scopearm -replace \"AGID01\",$agname\r\n$finalarm = $finalarm -replace \"ALERTNAME\", $alertname\r\n\r\necho $finalarm \u003e afalertdisable.json\r\n\r\n\r\nWrite-Output \"# REMOVING VM $vmName FROM ACTION GROUP $agval\"\r\n\r\n\r\ntry{\r\n    $afalertdisable = New-AzureRmResourceGroupDeployment -Name \"afalertdisable-$vmName\" `\r\n    -ResourceGroupName $vmRG `\r\n    -TemplateFile ./afalertdisable.json\r\n\r\n    Write-Output \"   --\u003e VM $vmName has successfully been removed from monitoring alert $alertname and action group $agval\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to disable alert\" $AlertContext.Name \"for VM $vmName\"\r\n}\r\n\r\nWrite-Verbose \"Results of ARM deployment to disable the alert: $afalertdisable\"\r\n\r\n### get the latest disks for the VM###\r\n#Get all of the OS disks snapshots for that VM and then order them decending (newest in position 0)\r\n\r\nWrite-Output \"Getting latest os disk snapshot for VM $vmName\"\r\ntry{\r\n    $allVmOsDisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like *\"$vmName-OSdisk-\"* | `\r\n        Sort-Object name –Descending\r\n\r\n   #select only the most recent snapshot (position 0)\r\n    $lastestDisk = $allVmOsDisks[0]\r\n\r\n   #parse out the seconds since epoch\r\n    $ssEpoch = $lastestDisk.name.Substring($lastestDisk.name.Length -16)\r\n   #get all of the disks (data and OS) for that vm at that time\r\n    $currentDisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like *\"$vmName\"* | `\r\n        Where-Object name -Like *\"$ssEpoch\"*\r\n    $currentDiskName = $currentDisks.Name\r\n    Write-Output \"   --\u003e The latests os disk snapshot for VM $vmName is $currentDiskName\"\r\n}\r\ncatch{\r\n    Write-error \"Could not retrieve latest os disk snapshot for VM $vmName. Ensure snapshots exist and were taken using the snapshot_runbook.\"\r\n}\r\n\r\n### create the new name. if it has failed over before, remove the numbers val, parse to int and increment, otherwise ad 'dr01'\r\nif ($vmName -like \"*-dr*\"){\r\n    $updateName = ($vmName.Substring(0, $vmName.Length - 2)) + (([int]$vmName.Substring($vmName.Length -2)) + 1).ToString(\"00\")\r\n}else{\r\n    $updateName = \"$vmName-dr01\"\r\n}\r\n\r\n### create a new NIC, attach it to the old VM, remove the original NIC###\r\n#dynamically get VM and subnet info\r\nWrite-Output \"Getting $vmName's NIC configuration...\"\r\ntry{\r\n    $oldNic = Get-AzureRmNetworkInterface | `\r\n        Where-Object { $_.VirtualMachine.id -eq $oldVM.id}\r\n    $subnet = $oldNic.IpConfigurations.subnet.id\r\n   # appeand nic01 to the vm name\r\n    $newNicName = \"$updateName\" + \"nic01\"\r\n    $location = $oldVM.location\r\n    Write-Output \"   --\u003e Successfully retrieved NIC configuration for $vmName\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to retrieve NIC configuration for VM $vmName\"\r\n}\r\n\r\n#create a new nic for the old VM\r\n\r\nWrite-Output \"# CREATING A NEW NETWORK INTERFACE CARD\"\r\n\r\ntry{\r\n        $newIpConfig = New-AzureRmNetworkInterfaceIpConfig -Name \"IPConfig1\" `\r\n            -PrivateIpAddressVersion IPv4 -SubnetId $subnet\r\n\r\n        $newNic = New-AzureRmNetworkInterface -Name $newNicName `\r\n            -ResourceGroupName $vmRG `\r\n            -Location $location `\r\n            -IpConfiguration $newIpConfig `\r\n            -Force\r\n\r\n        Write-Output \"   --\u003e Successfully created NIC $newNicName in resource group $vmRG\"\r\n}\r\ncatch{\r\n    Write-error \"Failed to create new network interface card.\"\r\n}\r\n\r\n\r\nWrite-Output \"# ASSIGNING NEW NIC TO FAILED VM\"\r\n\r\n#check old vm is shut down\r\ntry{\r\n    Write-verbose (Stop-AzureRmVM -Name $vmName -resourceGroupName $vmRG -force)\r\n\r\n   #associate new nic to old VM (on the object)\r\n    Write-verbose (Add-AzureRmVMNetworkInterface -VM $oldVM -Id $newNic.id)\r\n   #make the newly added nic the primary (on the object)\r\n    $oldVM.NetworkProfile.NetworkInterfaces.Item(1).primary = $true\r\n    $oldVmOs = $oldVM.StorageProfile.OsDisk.OsType\r\n   #remove the old nic from the VM object\r\n    Write-verbose (remove-AzureRmVMNetworkInterface -VM $oldVM -Id $oldNic.id)\r\n   #write the updated object to azure\r\n    write-verbose (Update-AzureRmVM -ResourceGroupName $vmRG -VM $oldVM)\r\n\r\n    Write-Output \"   --\u003e Successfully assigned $newNicName to $($oldVm.name)\"\r\n}\r\nCatch{\r\n    Write-Error \"Failed to assign $newNicName to $($oldVm.name)\"\r\n}\r\n\r\n### create the new VM###\r\n# set up variables for new VM \r\n# appeand -OSdisk to the vm name\r\n\r\n\r\nWrite-Output \"# CREATING OS DISK FOR NEW VM..\"\r\n\r\n\r\ntry{\r\n    $osDiskName = \"$updateName\" + \"-OSdisk\"\r\n    $vmSize = $oldVM.HardwareProfile.VmSize\r\n    $storageAccountType = \"Standard_LRS\"\r\n    $newVmName = \"$updateName\"\r\n\r\n   ### this doesnt work yet\r\n    $vmConfig = New-AzureRmVMConfig -VMName $newVmName -VMSize $vmSize\r\n   #change this id to the nic of the old vm's id\r\n    $vm = Add-AzureRmVMNetworkInterface -VM $vmConfig -Id $oldNic.id\r\n\r\n   #create the configuration for the disk (source is the snapshot)\r\n    $diskConf = New-AzureRmDiskConfig -AccountType $storageAccountType `\r\n        -Location   $lastestDisk.Location `\r\n        -SourceResourceId $lastestDisk.Id `\r\n        -CreateOption Copy `\r\n        -OsType $oldVmOs\r\n\r\n   # create the new os disk from the config\r\n    $osDisk = New-AzureRmDisk -Disk $diskConf `\r\n        -ResourceGroupName $vmRG `\r\n        -DiskName $osDiskName\r\n\r\n\r\n   #attach the os disk to the vm VM\r\n    if(($oldVmOs -eq \"Linux\") -or ($oldVmOs -eq \"Windows\")){\r\n        switch ($oldVmOs) {\r\n            \"Linux\" {\r\n                Write-verbose (Set-AzureRmVMOSDisk -VM $vm `\r\n                                    -ManagedDiskId $osDisk.Id `\r\n                                    -StorageAccountType $storageAccountType `\r\n                                    -DiskSizeInGB 128 `\r\n                                    -CreateOption Attach -Linux)\r\n            }\r\n            \"Windows\" {\r\n                Write-Verbose (Set-AzureRmVMOSDisk -VM $vm `\r\n                                    -ManagedDiskId $osDisk.Id `\r\n                                    -StorageAccountType $storageAccountType `\r\n                                    -DiskSizeInGB 128 `\r\n                                    -CreateOption Attach -Windows)\r\n\r\n                Write-Output \"OSType for new disk set to Windows\"\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        Write-Error \"OsType should be either Linux or Windows\"\r\n    }\r\n    Write-Output \"   --\u003e Successfully created $osDiskName with OSType $oldVmOs\"\r\n}\r\nCatch{\r\n    Write-Error \"Failed to create disk $osDiskName for new VM.\"\r\n}\r\n\r\nWrite-Output \"# CREATING NEW VM $newVmName\"\r\ntry{\r\n    $vm = Set-AzureRmVMBootDiagnostics -VM $vm -disable\r\n\r\n    #add the plan to the new vm\r\n    if ($oldVM.plan.product -eq \"cisco-meraki-vmx100\"){\r\n        Set-AzureRmVMPlan -VM $vm -Publisher \"cisco\" -Product \"cisco-meraki-vmx100\" -name \"vmx100\"\r\n    }\r\n    #Create the new VM\r\n    Write-verbose (New-AzureRmVM -ResourceGroupName $vmRG -Location $location -VM $vm)\r\n    Write-output \"   --\u003e Successfully created $newVmName in resource group $vmRG\"\r\n}\r\ncatch{\r\n    Write-Output \"Failed to create new VM $newVmName in $vmRg\"\r\n}\r\n\r\nWrite-Output \"RECREATING DATA DISKS FOR $newVmName\"\r\ntry{\r\n    $newCreatedVm = Get-AzureRmVM -resourceGroupName $vmRG -name $vm.name\r\n\r\n    ### This will re-instate data disks###\r\n    #this will get the list off all data disks\r\n    $dataDisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like *\"$vmName\"* | `\r\n        Where-Object name -Like *\"$ssEpoch\"* | `\r\n        Where-Object name -NotLike *\"-OSdisk-\"* | `\r\n        Sort-Object name\r\n\r\n    #type of storage\r\n    $storageType = 'Standard_LRS'\r\n    #initalise counter for lun\r\n    $lun = 0\r\n\r\n    if($dataDisks){\r\n        foreach($dataDisk in $dataDisks){\r\n            #create the config\r\n                $dataDiskConfig = New-AzureRmDiskConfig -AccountType $storageType `\r\n                    -Location   $dataDisk.Location `\r\n                    -SourceResourceId $dataDisk.Id `\r\n                    -CreateOption Copy\r\n                \r\n            #dynamically create the disk name\r\n            # appeand datadisk and the lun to the vm name\r\n                $diskName = \"$updateName-datadisk_$lun\"\r\n                \r\n            #create the new disk and store the output (to add it to vm later)\r\n                $copyDisk = New-AzureRmDisk -Disk $dataDiskConfig -ResourceGroupName $vmRG -DiskName $diskName\r\n            \r\n            #add data disk to vm\r\n                Write-verbose (Add-AzureRmVMDataDisk -VM $newCreatedVm -ManagedDiskId $copyDisk.id -lun $lun -createoption attach)\r\n            #increment lun for next disk\r\n                $lun = $lun + 1\r\n            }  \r\n            Write-verbose (Update-AzureRmVM -resourceGroupName $vmRG -VM $newCreatedVm)\r\n            Write-Output \"   --\u003e Successfully recreated and attached the following data disks: \" $dataDisks.Name      \r\n    }\r\n    else{\r\n        Write-Output \"   --\u003e There were no data disks associated with $($oldVM.name)\"\r\n    }\r\n}\r\ncatch {\r\n    Write-Error \"Failed to recreate the following data disks: \" $dataDisks.Name\r\n}\r\n\r\nWrite-Output \"Ensuring old NIC has moved over to new VM\"\r\n$newVmName = $newCreatedVm.name\r\n### this section will ensure that the NIC has moved over\r\n$newVmObj = Get-AzureRmVM -resourceGroupName $vmRG -VM $newCreatedVm.name\r\nif ($newVmObj.NetworkProfile.NetworkInterfaces.id -eq $oldNic.id){\r\n   Write-Output \"   --\u003e Old NIC has successfully been associated with VM $newVmName\"\r\n}else{\r\n    Write-Output \"   --\u003e Old NIC was not moved over to $newVmName, attempting again...\"\r\n\r\n    try{\r\n        $oldNicObj = Get-AzureRmNetworkInterface | where {$_.id -eq $oldVM.NetworkProfile.NetworkInterfaces.id}\r\n        $corIpVal = $oldNicObj | Get-AzureRmNetworkInterfaceIpConfig    \r\n        $oldNicObj.IpConfigurations[0].PrivateIpAllocationMethod = \"Dynamic\"\r\n        Write-verbose (Set-AzureRmNetworkInterface -NetworkInterface $oldNicObj)\r\n\r\n        $newVmNicObj = Get-AzureRmNetworkInterface | where {$_.id -eq $newCreatedVm.NetworkProfile.NetworkInterfaces.id}\r\n        $newVmNicObj.IpConfigurations[0].PrivateIpAddress = $corIpVal.PrivateIpAddress\r\n        Write-verbose (Set-AzureRmNetworkInterface -NetworkInterface $newVmNicObj)\r\n        Write-Output \"         --\u003e Old NIC has now been moved over to $newVmName\"\r\n    }\r\n    catch{\r\n        Write-Error \"Failed to moved the old NIC over $newVmName\"\r\n    }\r\n}\r\n\r\n\r\n### this will create the inital snapshot of the VM###\r\n#store date as var for use with snapshot names\r\n\r\nWrite-Output \"# TAKING INITIAL VM SNAPSHOT\"\r\n\r\ntry{\r\n    $dateVar =\"$((Get-Date -UFormat \"%s.\").Substring(0,11))$(Get-Date -Format \"fffff\")\"\r\n\r\n    #create os disk snapshot name\r\n    $OsSnapshotName= $newVmObj.name + \"-OSdisk-\" + $dateVar\r\n\r\n    #create a snapshot config with the managed disk from the VM os disk\r\n    $osDiskSnapshot = New-AzureRmSnapshotConfig `\r\n        -SourceUri $newVmObj.StorageProfile.OsDisk.ManagedDisk.Id `\r\n        -Location $newVmObj.location `\r\n        -CreateOption copy `\r\n        -SkuName Standard_ZRS\r\n\r\n    #create the actual snapshot of the os disk\r\n    Write-verbose (New-AzureRmSnapshot `\r\n                    -Snapshot $OsDiskSnapshot `\r\n                    -SnapshotName $OsSnapshotName `\r\n                    -ResourceGroupName $newVmObj.ResourceGroupName)\r\n\r\n    #get other data disks if attatched, could be list if more than 1\r\n    $dataDisks = $newVmObj.StorageProfile.DataDisks\r\n\r\n    foreach ($dataDisk in $dataDisks){\r\n        $dataDiskSnapshotName = $newVmObj.name + \"-\" + $dataDisk.name + \"-\" + $dateVar\r\n    #Snapshot config for each data disk\r\n        $dataDiskSnapshot = New-AzureRmSnapshotConfig `\r\n            -SourceUri $dataDisk.ManagedDisk.Id `\r\n            -Location $newVmObj.location `\r\n            -CreateOption copy `\r\n            -SkuName Standard_ZRS\r\n\r\n    #create actual snapshots\r\n        Write-verbose (New-AzureRmSnapshot `\r\n                        -Snapshot $dataDiskSnapshot `\r\n                        -SnapshotName $dataDiskSnapshotName `\r\n                        -ResourceGroupName $newVmObj.ResourceGroupName)\r\n    }\r\n    Write-Output \"   --\u003e Successfully took initial disk snapshot(s) for $newVmName\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to take initial snapshot(s) for $newVmName\"\r\n}\r\n\r\n\r\n### enrol the new VM in monitoring\r\n#$agid= Get-AzureRmActionGroup | where {$_.name -like \"$agname\"}\r\n$scopearm = $armjson -replace \"VMID01\",$newVmObj.id\r\n$scopearm = $scopearm -replace \"ENVARVAL\", \"true\"\r\n$finalarm = $scopearm -replace \"AGID01\",$agname\r\n$finalarm = $finalarm -replace \"ALERTNAME\", $alertname\r\n\r\necho $finalarm \u003e addalert.json\r\n\r\nWrite-Output \"Pausing for 5 minutes to ensure VM is ready to be monitored.\" # 5 minutes is the threshold at which we were no longer having issues with the new VM failing over instantly.\r\nStart-sleep -s 300\r\n\r\nWrite-Output \"# CREATING ALERT $alertname TIED TO ACTION GROUP $agval FOR VM $newVmName\"\r\ntry{\r\n    $afalertdeploy = New-AzureRmResourceGroupDeployment -Name \"afalertdeploy-$newVmName\" `\r\n    -ResourceGroupName $vmRG `\r\n    -TemplateFile ./addalert.json\r\n    Write-Output \"   --\u003e Successfully enrolled VM in monitoring.\"\r\n}\r\ncatch{\r\n    Write-error \"Failed to deploy ARM to enable the alert $alertname on $newVmName\"\r\n}\r\n\r\nWrite-Verbose \"Results of running the ARM to enable the alert: $afalertdeploy\"\r\n\r\nWrite-Output \"###################################################################################################################################\"\r\nWrite-Output \"                                                      FAILOVER COMPLETE\"\r\nWrite-Output \"###################################################################################################################################\"",
                            "description": "Runbook that will trigger upon VM failure",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/failover_runbook",
                            "location": "westeurope",
                            "log_progress": "true",
                            "log_verbose": "true",
                            "name": "failover_runbook",
                            "publish_content_link.#": "1",
                            "publish_content_link.0.hash.#": "0",
                            "publish_content_link.0.uri": "https://bitbucket.org/cloudreach/ais-dentsu-improvements/src/master/dr/Prod/snapshot.ps1",
                            "publish_content_link.0.version": "",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "runbook_type": "PowerShell",
                            "tags.%": "7",
                            "tags.automation": "workinghours=0700-2000 MON-FRI:expiry=none",
                            "tags.bpcid": "FG111",
                            "tags.business": "brand=:project=:owner=:financecontact=:criticality=",
                            "tags.coreops": "support=no:backup=0000UTC:patching=0300UTC",
                            "tags.metrics": "*",
                            "tags.security": "dataclassification=internal:pii=no",
                            "tags.technical": "environment=development"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "data.local_file.failover_script": {
                    "type": "local_file",
                    "depends_on": [],
                    "primary": {
                        "id": "809e2c1f5ba2b721b90a0b394f84aac4c9252973",
                        "attributes": {
                            "content": "[OutputType(\"PSAzureOperationResponse\")]\r\n\r\nparam\r\n(\r\n    [Parameter (Mandatory=$false)]\r\n    [object] $WebhookData\r\n)\r\n\r\n#region Auto-Generated DO NOT EDIT\r\n$ErrorActionPreference = \"stop\"\r\n\r\nif ($WebhookData)\r\n{\r\n   # Get the data object from WebhookData.\r\n    $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)\r\n    $WebhookName = $WebhookData.WebhookName\r\n    $AlertContext = [object] ($WebhookBody.data).context\r\n    $ResourceName = $AlertContext.resourceName\r\n    $ResourceType = $AlertContext.resourceType\r\n    $ResourceGroupName = $AlertContext.resourceGroupName\r\n    $SubId = $AlertContext.subscriptionId\r\n    $ResourceName = $AlertContext.resourceName\r\n    Write-Verbose \"resourceType: $ResourceType, resourceName: $ResourceName, resourceGroupName: $ResourceGroupName, subscriptionId: $SubId\" -Verbose\r\n\r\n    $ConnectionAssetName = \"AzureRunAsConnection\"\r\n    $Conn = Get-AutomationConnection -Name $ConnectionAssetName\r\n    if ($Conn -eq $null)\r\n    {\r\n        throw \"Could not retrieve connection asset: $ConnectionAssetName. Check that this asset exists in the Automation account.\"\r\n    }\r\n    Write-Output \"Authenticating to Azure with service principal and setting subscription to $SubId.\" -Verbose\r\n    Connect-AzureRmAccount -ServicePrincipal -Tenant $Conn.TenantID -ApplicationId $Conn.ApplicationID -CertificateThumbprint $Conn.CertificateThumbprint | Write-Verbose\r\n    Set-AzureRmContext -SubscriptionId $SubId -ErrorAction Stop | Write-Verbose\r\n}\r\nelse {\r\n   # Error\r\n    Write-Error \"This runbook is meant to be started from an Azure alert webhook only.\"\r\n}\r\n#endregion\r\n\r\n$currJobId = $PsPrivateMetaData.JobId.Guid\r\nWrite-Verbose \"Current Job ID: $currJobId\"\r\n\r\n# Initiliase the function to retrieve current automation account information\r\nfunction Get-CurrentAutomationAccount () {\r\n\r\n    Param (\r\n        $Runbook,\r\n        $currJobId\r\n    )\r\n\r\n    $MatchingRunbooks = (Get-AzureRmResource -ResourceType Microsoft.Automation/automationAccounts/runbooks) | where {$_.Name -match \"$Runbook\"}\r\n    \r\n\r\n\r\n    foreach($MatchingRunbook in $MatchingRunbooks)\r\n    {\r\n        $automationAccountName = $MatchingRunbook.Name.Split(\"/\")[0]\r\n\r\n        $jobs = Get-AzureRmAutomationJob -ResourceGroupName $MatchingRunbook.ResourceGroupName -AutomationAccountName $automationAccountName -Status Running\r\n\r\n        Foreach($job in $jobs)\r\n        {\r\n            if($job.JobId -eq $currJobId)\r\n            {\r\n                Write-Output 'Found the current automation account details, use $CurrentAutomationAccount to access its properties.'\r\n                return (Get-AzureRmAutomationAccount -ResourceGroupName $MatchingRunbook.ResourceGroupName -AutomationAccountName $automationAccountName)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n# Call the function to get current automation account information, filtering based on runbook name.\r\n\r\nWrite-Output \"Getting information about the current automation account...\"\r\n\r\ntry{\r\n$CurrentAutomationAccount = Get-CurrentAutomationAccount -currJobId $currJobId -Runbook \"failover_runbook\"\r\n\r\n$CurrentAutomationAccountName = $CurrentAutomationAccount.AutomationAccountName\r\n$CurrentAutomationAccounutResourceGroup =  $CurrentAutomationAccount.ResourceGroupName\r\n\r\nWrite-Output \"   --\u003e This is $CurrentAutomationAccountName in resource group $CurrentAutomationAccounutResourceGroup\"\r\n}\r\ncatch {\r\n    Write-error \"Failed to get current automation account information. Check the deployed failover runbook is called 'failover_runbook'\"\r\n}\r\n\r\n#Get-AzureRmAutomationJob only returns the input parameters when JOB id's includes\r\n$jobIds = (Get-AzureRmAutomationJob -ResourceGroupName $CurrentAutomationAccounutResourceGroup -RunbookName \"failover_runbook\" -AutomationAccountName $CurrentAutomationAccountName| where {($_.StartTime -gt ((Get-Date).AddHours(-1))) -and ($_.JobId -ne $currJobId)}).JobId\r\nif($jobIds.count -gt 0){\r\n    foreach($jobid in $jobIds){\r\n        $job = Get-AzureRmAutomationJob -ResourceGroupName $CurrentAutomationAccounutResourceGroup -AutomationAccountName $CurrentAutomationAccountName -JobId $jobid\r\n        $vmInJob = ($job.JobParameters.webhookData.RequestBody | ConvertFrom-Json).data.context.resourceName\r\n\r\n        if($vmInJob -eq $ResourceName){\r\n            switch ($job.Status){\r\n                \"Completed\"{\r\n                    Write-Output \"$vmInJob has already failed over, exiting...\"\r\n                    Exit 0\r\n                    break\r\n                }\r\n                \"Running\"{\r\n                    Write-Output \"Failover job for $vmInJob in progress\"\r\n                    Exit 0\r\n                    break\r\n                }\r\n                Default{\r\n                    Write-Output \"Starting VM failover...\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n$agval = (Get-AzureRmActionGroup -ResourceGroupName $ResourceGroupName -WarningAction Ignore | Where-Object {$_.WebhookReceivers.name -eq $WebhookName}).Name\r\n\r\n\r\n### json for enroling a VM in monitoring\r\n$armjson =@' \r\n{\r\n    \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {},\r\n    \"variables\": {},\r\n    \"resources\": [\r\n        {\r\n            \"name\": \"ALERTNAME\",\r\n            \"type\": \"Microsoft.Insights/metricAlerts\",\r\n            \"location\": \"global\",\r\n            \"apiVersion\": \"2018-03-01\",\r\n            \"tags\": {},\r\n            \"properties\": {\r\n                \"description\": \"Auto-failover alert\",\r\n                \"severity\": \"3\",\r\n                \"enabled\": \"ENVARVAL\",\r\n                \"scopes\": [\"VMID01\"],\r\n                \"evaluationFrequency\":\"PT1M\",\r\n                \"windowSize\": \"PT5M\",\r\n                \"criteria\": {\r\n                    \"odata.type\": \"Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria\",\r\n                    \"allOf\": [\r\n                        {\r\n                            \"name\" : \"1st criterion\",\r\n                            \"metricName\": \"Network Out\",\r\n                            \"dimensions\":[],\r\n                            \"operator\": \"LessThan\",\r\n                            \"threshold\" : \"1000\",\r\n                            \"timeAggregation\": \"Total\"\r\n                        }\r\n                    ]\r\n                },\r\n                \"actions\": [\r\n                    {\r\n                        \"actionGroupId\": \"AGID01\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n'@\r\n\r\n#name of the faild VM\r\n$vmName = $ResourceName\r\n$vmRG = $ResourceGroupName\r\n$alertname = ($AlertContext.Name)\r\n\r\n### disable old VM monitoring\r\nWrite-Output \"Getting VM details for vm $vmName and action group $agval in resource group $vmRG...\"\r\n\r\ntry{\r\n    $oldVM = Get-AzureRmVM -name $vmName -resourceGroupName $vmRG\r\n\r\n    $agid= Get-AzureRmActionGroup | where {$_.name -like \"$agval\"}\r\n    $agid = $agid | Select-Object -First 1 \r\n    $agname = $agid.id\r\n\r\n    Write-Output \"   --\u003e Done\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to retrieve information about VM $vmName or action group $agval\"\r\n}\r\n\r\n$scopearm = $armjson -replace \"VMID01\",$oldVM.id\r\n$scopearm = $scopearm -replace \"ENVARVAL\", \"false\"\r\n$finalarm = $scopearm -replace \"AGID01\",$agname\r\n$finalarm = $finalarm -replace \"ALERTNAME\", $alertname\r\n\r\necho $finalarm \u003e afalertdisable.json\r\n\r\n\r\nWrite-Output \"# REMOVING VM $vmName FROM ACTION GROUP $agval\"\r\n\r\n\r\ntry{\r\n    $afalertdisable = New-AzureRmResourceGroupDeployment -Name \"afalertdisable-$vmName\" `\r\n    -ResourceGroupName $vmRG `\r\n    -TemplateFile ./afalertdisable.json\r\n\r\n    Write-Output \"   --\u003e VM $vmName has successfully been removed from monitoring alert $alertname and action group $agval\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to disable alert\" $AlertContext.Name \"for VM $vmName\"\r\n}\r\n\r\nWrite-Verbose \"Results of ARM deployment to disable the alert: $afalertdisable\"\r\n\r\n### get the latest disks for the VM###\r\n#Get all of the OS disks snapshots for that VM and then order them decending (newest in position 0)\r\n\r\nWrite-Output \"Getting latest os disk snapshot for VM $vmName\"\r\ntry{\r\n    $allVmOsDisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like *\"$vmName-OSdisk-\"* | `\r\n        Sort-Object name –Descending\r\n\r\n   #select only the most recent snapshot (position 0)\r\n    $lastestDisk = $allVmOsDisks[0]\r\n\r\n   #parse out the seconds since epoch\r\n    $ssEpoch = $lastestDisk.name.Substring($lastestDisk.name.Length -16)\r\n   #get all of the disks (data and OS) for that vm at that time\r\n    $currentDisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like *\"$vmName\"* | `\r\n        Where-Object name -Like *\"$ssEpoch\"*\r\n    $currentDiskName = $currentDisks.Name\r\n    Write-Output \"   --\u003e The latests os disk snapshot for VM $vmName is $currentDiskName\"\r\n}\r\ncatch{\r\n    Write-error \"Could not retrieve latest os disk snapshot for VM $vmName. Ensure snapshots exist and were taken using the snapshot_runbook.\"\r\n}\r\n\r\n### create the new name. if it has failed over before, remove the numbers val, parse to int and increment, otherwise ad 'dr01'\r\nif ($vmName -like \"*-dr*\"){\r\n    $updateName = ($vmName.Substring(0, $vmName.Length - 2)) + (([int]$vmName.Substring($vmName.Length -2)) + 1).ToString(\"00\")\r\n}else{\r\n    $updateName = \"$vmName-dr01\"\r\n}\r\n\r\n### create a new NIC, attach it to the old VM, remove the original NIC###\r\n#dynamically get VM and subnet info\r\nWrite-Output \"Getting $vmName's NIC configuration...\"\r\ntry{\r\n    $oldNic = Get-AzureRmNetworkInterface | `\r\n        Where-Object { $_.VirtualMachine.id -eq $oldVM.id}\r\n    $subnet = $oldNic.IpConfigurations.subnet.id\r\n   # appeand nic01 to the vm name\r\n    $newNicName = \"$updateName\" + \"nic01\"\r\n    $location = $oldVM.location\r\n    Write-Output \"   --\u003e Successfully retrieved NIC configuration for $vmName\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to retrieve NIC configuration for VM $vmName\"\r\n}\r\n\r\n#create a new nic for the old VM\r\n\r\nWrite-Output \"# CREATING A NEW NETWORK INTERFACE CARD\"\r\n\r\ntry{\r\n        $newIpConfig = New-AzureRmNetworkInterfaceIpConfig -Name \"IPConfig1\" `\r\n            -PrivateIpAddressVersion IPv4 -SubnetId $subnet\r\n\r\n        $newNic = New-AzureRmNetworkInterface -Name $newNicName `\r\n            -ResourceGroupName $vmRG `\r\n            -Location $location `\r\n            -IpConfiguration $newIpConfig `\r\n            -Force\r\n\r\n        Write-Output \"   --\u003e Successfully created NIC $newNicName in resource group $vmRG\"\r\n}\r\ncatch{\r\n    Write-error \"Failed to create new network interface card.\"\r\n}\r\n\r\n\r\nWrite-Output \"# ASSIGNING NEW NIC TO FAILED VM\"\r\n\r\n#check old vm is shut down\r\ntry{\r\n    Write-verbose (Stop-AzureRmVM -Name $vmName -resourceGroupName $vmRG -force)\r\n\r\n   #associate new nic to old VM (on the object)\r\n    Write-verbose (Add-AzureRmVMNetworkInterface -VM $oldVM -Id $newNic.id)\r\n   #make the newly added nic the primary (on the object)\r\n    $oldVM.NetworkProfile.NetworkInterfaces.Item(1).primary = $true\r\n    $oldVmOs = $oldVM.StorageProfile.OsDisk.OsType\r\n   #remove the old nic from the VM object\r\n    Write-verbose (remove-AzureRmVMNetworkInterface -VM $oldVM -Id $oldNic.id)\r\n   #write the updated object to azure\r\n    write-verbose (Update-AzureRmVM -ResourceGroupName $vmRG -VM $oldVM)\r\n\r\n    Write-Output \"   --\u003e Successfully assigned $newNicName to $($oldVm.name)\"\r\n}\r\nCatch{\r\n    Write-Error \"Failed to assign $newNicName to $($oldVm.name)\"\r\n}\r\n\r\n### create the new VM###\r\n# set up variables for new VM \r\n# appeand -OSdisk to the vm name\r\n\r\n\r\nWrite-Output \"# CREATING OS DISK FOR NEW VM..\"\r\n\r\n\r\ntry{\r\n    $osDiskName = \"$updateName\" + \"-OSdisk\"\r\n    $vmSize = $oldVM.HardwareProfile.VmSize\r\n    $storageAccountType = \"Standard_LRS\"\r\n    $newVmName = \"$updateName\"\r\n\r\n   ### this doesnt work yet\r\n    $vmConfig = New-AzureRmVMConfig -VMName $newVmName -VMSize $vmSize\r\n   #change this id to the nic of the old vm's id\r\n    $vm = Add-AzureRmVMNetworkInterface -VM $vmConfig -Id $oldNic.id\r\n\r\n   #create the configuration for the disk (source is the snapshot)\r\n    $diskConf = New-AzureRmDiskConfig -AccountType $storageAccountType `\r\n        -Location   $lastestDisk.Location `\r\n        -SourceResourceId $lastestDisk.Id `\r\n        -CreateOption Copy `\r\n        -OsType $oldVmOs\r\n\r\n   # create the new os disk from the config\r\n    $osDisk = New-AzureRmDisk -Disk $diskConf `\r\n        -ResourceGroupName $vmRG `\r\n        -DiskName $osDiskName\r\n\r\n\r\n   #attach the os disk to the vm VM\r\n    if(($oldVmOs -eq \"Linux\") -or ($oldVmOs -eq \"Windows\")){\r\n        switch ($oldVmOs) {\r\n            \"Linux\" {\r\n                Write-verbose (Set-AzureRmVMOSDisk -VM $vm `\r\n                                    -ManagedDiskId $osDisk.Id `\r\n                                    -StorageAccountType $storageAccountType `\r\n                                    -DiskSizeInGB 128 `\r\n                                    -CreateOption Attach -Linux)\r\n            }\r\n            \"Windows\" {\r\n                Write-Verbose (Set-AzureRmVMOSDisk -VM $vm `\r\n                                    -ManagedDiskId $osDisk.Id `\r\n                                    -StorageAccountType $storageAccountType `\r\n                                    -DiskSizeInGB 128 `\r\n                                    -CreateOption Attach -Windows)\r\n\r\n                Write-Output \"OSType for new disk set to Windows\"\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        Write-Error \"OsType should be either Linux or Windows\"\r\n    }\r\n    Write-Output \"   --\u003e Successfully created $osDiskName with OSType $oldVmOs\"\r\n}\r\nCatch{\r\n    Write-Error \"Failed to create disk $osDiskName for new VM.\"\r\n}\r\n\r\nWrite-Output \"# CREATING NEW VM $newVmName\"\r\ntry{\r\n    $vm = Set-AzureRmVMBootDiagnostics -VM $vm -disable\r\n\r\n    #add the plan to the new vm\r\n    if ($oldVM.plan.product -eq \"cisco-meraki-vmx100\"){\r\n        Set-AzureRmVMPlan -VM $vm -Publisher \"cisco\" -Product \"cisco-meraki-vmx100\" -name \"vmx100\"\r\n    }\r\n    #Create the new VM\r\n    Write-verbose (New-AzureRmVM -ResourceGroupName $vmRG -Location $location -VM $vm)\r\n    Write-output \"   --\u003e Successfully created $newVmName in resource group $vmRG\"\r\n}\r\ncatch{\r\n    Write-Output \"Failed to create new VM $newVmName in $vmRg\"\r\n}\r\n\r\nWrite-Output \"RECREATING DATA DISKS FOR $newVmName\"\r\ntry{\r\n    $newCreatedVm = Get-AzureRmVM -resourceGroupName $vmRG -name $vm.name\r\n\r\n    ### This will re-instate data disks###\r\n    #this will get the list off all data disks\r\n    $dataDisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like *\"$vmName\"* | `\r\n        Where-Object name -Like *\"$ssEpoch\"* | `\r\n        Where-Object name -NotLike *\"-OSdisk-\"* | `\r\n        Sort-Object name\r\n\r\n    #type of storage\r\n    $storageType = 'Standard_LRS'\r\n    #initalise counter for lun\r\n    $lun = 0\r\n\r\n    if($dataDisks){\r\n        foreach($dataDisk in $dataDisks){\r\n            #create the config\r\n                $dataDiskConfig = New-AzureRmDiskConfig -AccountType $storageType `\r\n                    -Location   $dataDisk.Location `\r\n                    -SourceResourceId $dataDisk.Id `\r\n                    -CreateOption Copy\r\n                \r\n            #dynamically create the disk name\r\n            # appeand datadisk and the lun to the vm name\r\n                $diskName = \"$updateName-datadisk_$lun\"\r\n                \r\n            #create the new disk and store the output (to add it to vm later)\r\n                $copyDisk = New-AzureRmDisk -Disk $dataDiskConfig -ResourceGroupName $vmRG -DiskName $diskName\r\n            \r\n            #add data disk to vm\r\n                Write-verbose (Add-AzureRmVMDataDisk -VM $newCreatedVm -ManagedDiskId $copyDisk.id -lun $lun -createoption attach)\r\n            #increment lun for next disk\r\n                $lun = $lun + 1\r\n            }  \r\n            Write-verbose (Update-AzureRmVM -resourceGroupName $vmRG -VM $newCreatedVm)\r\n            Write-Output \"   --\u003e Successfully recreated and attached the following data disks: \" $dataDisks.Name      \r\n    }\r\n    else{\r\n        Write-Output \"   --\u003e There were no data disks associated with $($oldVM.name)\"\r\n    }\r\n}\r\ncatch {\r\n    Write-Error \"Failed to recreate the following data disks: \" $dataDisks.Name\r\n}\r\n\r\nWrite-Output \"Ensuring old NIC has moved over to new VM\"\r\n$newVmName = $newCreatedVm.name\r\n### this section will ensure that the NIC has moved over\r\n$newVmObj = Get-AzureRmVM -resourceGroupName $vmRG -VM $newCreatedVm.name\r\nif ($newVmObj.NetworkProfile.NetworkInterfaces.id -eq $oldNic.id){\r\n   Write-Output \"   --\u003e Old NIC has successfully been associated with VM $newVmName\"\r\n}else{\r\n    Write-Output \"   --\u003e Old NIC was not moved over to $newVmName, attempting again...\"\r\n\r\n    try{\r\n        $oldNicObj = Get-AzureRmNetworkInterface | where {$_.id -eq $oldVM.NetworkProfile.NetworkInterfaces.id}\r\n        $corIpVal = $oldNicObj | Get-AzureRmNetworkInterfaceIpConfig    \r\n        $oldNicObj.IpConfigurations[0].PrivateIpAllocationMethod = \"Dynamic\"\r\n        Write-verbose (Set-AzureRmNetworkInterface -NetworkInterface $oldNicObj)\r\n\r\n        $newVmNicObj = Get-AzureRmNetworkInterface | where {$_.id -eq $newCreatedVm.NetworkProfile.NetworkInterfaces.id}\r\n        $newVmNicObj.IpConfigurations[0].PrivateIpAddress = $corIpVal.PrivateIpAddress\r\n        Write-verbose (Set-AzureRmNetworkInterface -NetworkInterface $newVmNicObj)\r\n        Write-Output \"         --\u003e Old NIC has now been moved over to $newVmName\"\r\n    }\r\n    catch{\r\n        Write-Error \"Failed to moved the old NIC over $newVmName\"\r\n    }\r\n}\r\n\r\n\r\n### this will create the inital snapshot of the VM###\r\n#store date as var for use with snapshot names\r\n\r\nWrite-Output \"# TAKING INITIAL VM SNAPSHOT\"\r\n\r\ntry{\r\n    $dateVar =\"$((Get-Date -UFormat \"%s.\").Substring(0,11))$(Get-Date -Format \"fffff\")\"\r\n\r\n    #create os disk snapshot name\r\n    $OsSnapshotName= $newVmObj.name + \"-OSdisk-\" + $dateVar\r\n\r\n    #create a snapshot config with the managed disk from the VM os disk\r\n    $osDiskSnapshot = New-AzureRmSnapshotConfig `\r\n        -SourceUri $newVmObj.StorageProfile.OsDisk.ManagedDisk.Id `\r\n        -Location $newVmObj.location `\r\n        -CreateOption copy `\r\n        -SkuName Standard_ZRS\r\n\r\n    #create the actual snapshot of the os disk\r\n    Write-verbose (New-AzureRmSnapshot `\r\n                    -Snapshot $OsDiskSnapshot `\r\n                    -SnapshotName $OsSnapshotName `\r\n                    -ResourceGroupName $newVmObj.ResourceGroupName)\r\n\r\n    #get other data disks if attatched, could be list if more than 1\r\n    $dataDisks = $newVmObj.StorageProfile.DataDisks\r\n\r\n    foreach ($dataDisk in $dataDisks){\r\n        $dataDiskSnapshotName = $newVmObj.name + \"-\" + $dataDisk.name + \"-\" + $dateVar\r\n    #Snapshot config for each data disk\r\n        $dataDiskSnapshot = New-AzureRmSnapshotConfig `\r\n            -SourceUri $dataDisk.ManagedDisk.Id `\r\n            -Location $newVmObj.location `\r\n            -CreateOption copy `\r\n            -SkuName Standard_ZRS\r\n\r\n    #create actual snapshots\r\n        Write-verbose (New-AzureRmSnapshot `\r\n                        -Snapshot $dataDiskSnapshot `\r\n                        -SnapshotName $dataDiskSnapshotName `\r\n                        -ResourceGroupName $newVmObj.ResourceGroupName)\r\n    }\r\n    Write-Output \"   --\u003e Successfully took initial disk snapshot(s) for $newVmName\"\r\n}\r\ncatch{\r\n    Write-Error \"Failed to take initial snapshot(s) for $newVmName\"\r\n}\r\n\r\n\r\n### enrol the new VM in monitoring\r\n#$agid= Get-AzureRmActionGroup | where {$_.name -like \"$agname\"}\r\n$scopearm = $armjson -replace \"VMID01\",$newVmObj.id\r\n$scopearm = $scopearm -replace \"ENVARVAL\", \"true\"\r\n$finalarm = $scopearm -replace \"AGID01\",$agname\r\n$finalarm = $finalarm -replace \"ALERTNAME\", $alertname\r\n\r\necho $finalarm \u003e addalert.json\r\n\r\nWrite-Output \"Pausing for 5 minutes to ensure VM is ready to be monitored.\" # 5 minutes is the threshold at which we were no longer having issues with the new VM failing over instantly.\r\nStart-sleep -s 300\r\n\r\nWrite-Output \"# CREATING ALERT $alertname TIED TO ACTION GROUP $agval FOR VM $newVmName\"\r\ntry{\r\n    $afalertdeploy = New-AzureRmResourceGroupDeployment -Name \"afalertdeploy-$newVmName\" `\r\n    -ResourceGroupName $vmRG `\r\n    -TemplateFile ./addalert.json\r\n    Write-Output \"   --\u003e Successfully enrolled VM in monitoring.\"\r\n}\r\ncatch{\r\n    Write-error \"Failed to deploy ARM to enable the alert $alertname on $newVmName\"\r\n}\r\n\r\nWrite-Verbose \"Results of running the ARM to enable the alert: $afalertdeploy\"\r\n\r\nWrite-Output \"###################################################################################################################################\"\r\nWrite-Output \"                                                      FAILOVER COMPLETE\"\r\nWrite-Output \"###################################################################################################################################\"",
                            "filename": "../../../runbookCode/re-instatevmRunbook.ps1",
                            "id": "809e2c1f5ba2b721b90a0b394f84aac4c9252973"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "Automation_Account",
                "Modules_Runbook"
            ],
            "outputs": {},
            "resources": {
                "azurerm_automation_runbook.modules_runbook": {
                    "type": "azurerm_automation_runbook",
                    "depends_on": [
                        "data.local_file.modules_script"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/modules_runbook",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "content": "param(\n    [Parameter(Mandatory=$false)]\n    [String] $ResourceGroupName = \"bf-dr-rg\",\n\n    [Parameter(Mandatory=$false)]\n    [String] $AutomationAccountName = \"bf-aac-stack118\",\n\n    $Dependencies = (\"Azurerm.profile\"),\n\n    $module1 = @{\n        name = \"AzureRM.Resources\"\n    },\n    $module2 = @{\n        name = \"AzureRM.Compute\"\n    },\n    $module3 = @{\n        name = \"AzureRM.Network\"\n        version = \"6.8.0\"\n    },    \n    $module4 = @{\n        name = \"AzureRM.Insights\"\n    },\n    $module5 = @{\n        name = \"AzureRM.Automation\"\n    },\n    [System.Collections.ArrayList]\n    $moduleList = @($module1,$module2,$module3,$module4,$module5)\n)\n\n$connectionName = \"AzureRunAsConnection\"\ntry\n{\n    # Get the connection \"AzureRunAsConnection \"\n    $servicePrincipalConnection=Get-AutomationConnection -Name $connectionName         \n\n    \"Logging in to Azure...\"\n    Add-AzureRmAccount `\n        -ServicePrincipal `\n        -TenantId $servicePrincipalConnection.TenantId `\n        -ApplicationId $servicePrincipalConnection.ApplicationId `\n        -CertificateThumbprint $servicePrincipalConnection.CertificateThumbprint \n}\ncatch {\n    if (!$servicePrincipalConnection)\n    {\n        $ErrorMessage = \"Connection $connectionName not found.\"\n        throw $ErrorMessage\n    } else{\n        Write-Error -Message $_.Exception\n        throw $_.Exception\n    }\n}\n\n$stopwatch =  [system.diagnostics.stopwatch]::StartNew()\n\n$stopwatch.Start()\n\n\nforeach($dependency in $Dependencies)\n{\n    $ModuleContentUrl = \"https://www.powershellgallery.com/api/v2/package/$dependency\"\n    New-AzureRmAutomationModule -Name $dependency -ContentLink $ModuleContentUrl -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName\n\n    Write-Output \"Installing dependency: $dependency\"\n    $i = 1\n\n    Start-Sleep 2\n    while ((Get-AzureRmAutomationModule -Name $dependency -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName).ProvisioningState -ne \"Succeeded\")\n    {\n        (\"===\" * $i)\n        Start-Sleep -Seconds 5\n        $i++\n    }\n    Write-Output \"$dependency successfully installed!\"\n}\n\nforeach($module in $moduleList)\n{\n    $ModuleContentUrl = \"https://www.powershellgallery.com/api/v2/package/\" + $module.name+ \"/\" + $module.version\n\n    Write-Output \"Installing\" $module.name\n    New-AzureRmAutomationModule -Name $module.name -ContentLink $ModuleContentUrl -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName\n    Write-Output \"Installing module: \" $module.name\n    $i = 1\n\n    Start-Sleep 2\n    while ((Get-AzureRmAutomationModule -Name $module.name -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName).ProvisioningState -ne \"Succeeded\")\n    {\n        (\"===\" * $i)\n        Start-Sleep -Seconds 5\n        $i++\n    }\n    Write-Output $module.name \"successfully installed!\"\n}\n\n$stopwatch.stop()\n$stopwatch.Elapsed",
                            "description": "Runbook to install the required modules",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/modules_runbook",
                            "location": "westeurope",
                            "log_progress": "true",
                            "log_verbose": "true",
                            "name": "modules_runbook",
                            "publish_content_link.#": "1",
                            "publish_content_link.0.hash.#": "0",
                            "publish_content_link.0.uri": "https://bitbucket.org/cloudreach/ais-dentsu-improvements/src/master/dr/Prod/snapshot.ps1",
                            "publish_content_link.0.version": "",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "runbook_type": "PowerShell",
                            "tags.%": "7",
                            "tags.automation": "workinghours=0700-2000 MON-FRI:expiry=none",
                            "tags.bpcid": "FG111",
                            "tags.business": "brand=:project=:owner=:financecontact=:criticality=",
                            "tags.coreops": "support=no:backup=0000UTC:patching=0300UTC",
                            "tags.metrics": "*",
                            "tags.security": "dataclassification=internal:pii=no",
                            "tags.technical": "environment=development"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "data.local_file.modules_script": {
                    "type": "local_file",
                    "depends_on": [],
                    "primary": {
                        "id": "a1f120ac34375f7820f63ef9041bc2a13bc1e9ce",
                        "attributes": {
                            "content": "param(\n    [Parameter(Mandatory=$false)]\n    [String] $ResourceGroupName = \"bf-dr-rg\",\n\n    [Parameter(Mandatory=$false)]\n    [String] $AutomationAccountName = \"bf-aac-stack118\",\n\n    $Dependencies = (\"Azurerm.profile\"),\n\n    $module1 = @{\n        name = \"AzureRM.Resources\"\n    },\n    $module2 = @{\n        name = \"AzureRM.Compute\"\n    },\n    $module3 = @{\n        name = \"AzureRM.Network\"\n        version = \"6.8.0\"\n    },    \n    $module4 = @{\n        name = \"AzureRM.Insights\"\n    },\n    $module5 = @{\n        name = \"AzureRM.Automation\"\n    },\n    [System.Collections.ArrayList]\n    $moduleList = @($module1,$module2,$module3,$module4,$module5)\n)\n\n$connectionName = \"AzureRunAsConnection\"\ntry\n{\n    # Get the connection \"AzureRunAsConnection \"\n    $servicePrincipalConnection=Get-AutomationConnection -Name $connectionName         \n\n    \"Logging in to Azure...\"\n    Add-AzureRmAccount `\n        -ServicePrincipal `\n        -TenantId $servicePrincipalConnection.TenantId `\n        -ApplicationId $servicePrincipalConnection.ApplicationId `\n        -CertificateThumbprint $servicePrincipalConnection.CertificateThumbprint \n}\ncatch {\n    if (!$servicePrincipalConnection)\n    {\n        $ErrorMessage = \"Connection $connectionName not found.\"\n        throw $ErrorMessage\n    } else{\n        Write-Error -Message $_.Exception\n        throw $_.Exception\n    }\n}\n\n$stopwatch =  [system.diagnostics.stopwatch]::StartNew()\n\n$stopwatch.Start()\n\n\nforeach($dependency in $Dependencies)\n{\n    $ModuleContentUrl = \"https://www.powershellgallery.com/api/v2/package/$dependency\"\n    New-AzureRmAutomationModule -Name $dependency -ContentLink $ModuleContentUrl -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName\n\n    Write-Output \"Installing dependency: $dependency\"\n    $i = 1\n\n    Start-Sleep 2\n    while ((Get-AzureRmAutomationModule -Name $dependency -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName).ProvisioningState -ne \"Succeeded\")\n    {\n        (\"===\" * $i)\n        Start-Sleep -Seconds 5\n        $i++\n    }\n    Write-Output \"$dependency successfully installed!\"\n}\n\nforeach($module in $moduleList)\n{\n    $ModuleContentUrl = \"https://www.powershellgallery.com/api/v2/package/\" + $module.name+ \"/\" + $module.version\n\n    Write-Output \"Installing\" $module.name\n    New-AzureRmAutomationModule -Name $module.name -ContentLink $ModuleContentUrl -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName\n    Write-Output \"Installing module: \" $module.name\n    $i = 1\n\n    Start-Sleep 2\n    while ((Get-AzureRmAutomationModule -Name $module.name -ResourceGroupName $ResourceGroupName -AutomationAccountName $AutomationAccountName).ProvisioningState -ne \"Succeeded\")\n    {\n        (\"===\" * $i)\n        Start-Sleep -Seconds 5\n        $i++\n    }\n    Write-Output $module.name \"successfully installed!\"\n}\n\n$stopwatch.stop()\n$stopwatch.Elapsed",
                            "filename": "../../../runbookCode/modulesRunbook.ps1",
                            "id": "a1f120ac34375f7820f63ef9041bc2a13bc1e9ce"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "null_resource.Start_Runbook": {
                    "type": "null_resource",
                    "depends_on": [
                        "azurerm_automation_runbook.modules_runbook",
                        "local.powershell_interpreter"
                    ],
                    "primary": {
                        "id": "7871224189932942892",
                        "attributes": {
                            "id": "7871224189932942892"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "Automation_Account",
                "Snapshot_Cleanup_Module"
            ],
            "outputs": {},
            "resources": {
                "azurerm_automation_runbook.snapshot_cleanup_runbook": {
                    "type": "azurerm_automation_runbook",
                    "depends_on": [
                        "data.local_file.snapshot_cleanup_script"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/cleanup_runbook",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "content": "Param(\r\n    $vm1 = @{\r\n        name = \"bf-suse-01\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    $vm2 = @{\r\n        name = \"bf-suse-02\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    [System.Collections.ArrayList]\r\n    $vmList = @($vm1,$vm2)\r\n)\r\n\u003c#\r\nThis variable is used to control how many snapshots to keep. \r\nAll snapshots that are above the number specified here will be removed.\r\n#\u003e\r\n$numberOfSnapshots = 10\r\n\r\n#Region connection\r\ntry {\r\n    $RunAsConnection = Get-AutomationConnection -Name \"AzureRunAsConnection\"         \r\n\r\n    #Log into azure using run as account\r\n    Write-Output (\"Logging in to Azure...\")\r\n    Add-AzureRmAccount `\r\n        -ServicePrincipal `\r\n        -TenantId $RunAsConnection.TenantId `\r\n        -ApplicationId $RunAsConnection.ApplicationId `\r\n        -CertificateThumbprint $RunAsConnection.CertificateThumbprint \r\n\r\n    Select-AzureRmSubscription -SubscriptionId $RunAsConnection.SubscriptionID  | Write-Verbose \r\n}\r\ncatch {\r\n    if(!$RunAsConnection) {\r\n        throw \"Connection AzureRunAsConnection not found. Please create one\"\r\n    }\r\n    else {\r\n        throw $_.Exception\r\n    }\r\n}\r\n#endregion\r\n\r\n\u003c#\r\nThe main foreach loop. This is to perform the actions for all VMs (one at a time) \r\nfrom the list specified in the param section.\r\n#\u003e\r\nforeach ($vmInList in $vmList) {\r\n    #this block is used to get all of the VMs including failed over ones\r\n    $rgVar = Get-AzureRmResourceGroup -name $vmInList.resourceGroup\r\n    $uri = $rgVar.ResourceId + \"/providers/Microsoft.Compute/virtualMachines/\" + $vmInList.name\r\n    $vmObjs= Get-AzureRmVM | Where-Object { $_.id -like \"$uri*\"}\r\n\r\n    #this is used to select the most recent failed over VM\r\n    if ($vmObjs.Length -eq \"1\"){\r\n        $vm = $vmObjs\r\n    }elseif ($vmObjs.Length -gt \"1\"){\r\n        $vmObjs = $vmObjs | Sort-Object -Property Name -Descending\r\n        $vm = $vmObjs[0]\r\n    }\r\n\r\n    $vmName = $vm.Name\r\n\r\n    Write-Output \"Finding all OS snapshots...\"\r\n    #this is used to get all of the OS disk snapshots of a VM, newest first\r\n    $allVmOsDiskSnapshots = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like \"$vmName-OSdisk-*\" | `\r\n        Sort-Object name –Descending\r\n\r\n    #this is used to ignore the first X snapshots, where X is the number to keep\r\n    for ($i=$numberOfSnapshots; $i -lt $allVmOsDiskSnapshots.Count; $i++) {\r\n        $rg = $allVmOsDiskSnapshots[$i].resourceGroupName\r\n        $osSnapshotName = $allVmOsDiskSnapshots[$i].name\r\n        #parse the seconds since epoch (all snapshots taken at that time will have the same value)\r\n        $ssepoch = $osSnapshotName.Substring($osSnapshotName.Length -16)\r\n        Write-Output \"Removing snapshot: $osSnapshotName\"\r\n        #delete the snapshots that match the VM name and the seconds since epoch (basically that snapshot set)\r\n        $deletedisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like \"*$vmName*\" | `\r\n        Where-Object name -Like \"*$ssepoch*\" | Remove-AzureRmSnapshot -Force\r\n    }\r\n}",
                            "description": "Runbook that will clean up old snapshots",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/cleanup_runbook",
                            "location": "westeurope",
                            "log_progress": "true",
                            "log_verbose": "true",
                            "name": "cleanup_runbook",
                            "publish_content_link.#": "1",
                            "publish_content_link.0.hash.#": "0",
                            "publish_content_link.0.uri": "https://bitbucket.org/cloudreach/ais-dentsu-improvements/src/master/dr/Prod/snapshot.ps1",
                            "publish_content_link.0.version": "",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "runbook_type": "PowerShell",
                            "tags.%": "7",
                            "tags.automation": "workinghours=0700-2000 MON-FRI:expiry=none",
                            "tags.bpcid": "FG111",
                            "tags.business": "brand=:project=:owner=:financecontact=:criticality=",
                            "tags.coreops": "support=no:backup=0000UTC:patching=0300UTC",
                            "tags.metrics": "*",
                            "tags.security": "dataclassification=internal:pii=no",
                            "tags.technical": "environment=development"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_automation_schedule.schedule": {
                    "type": "azurerm_automation_schedule",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_cleanup_runbook"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot-cleanup-daily-schedule-stacktest",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "automation_account_name": "sm-tf-tagging-test1-aa",
                            "description": "This schedules the runbook to run once a day, 10 minutes after creation.",
                            "expiry_time": "9999-12-31T23:59:00Z",
                            "frequency": "Hour",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot-cleanup-daily-schedule-stacktest",
                            "interval": "1",
                            "name": "snapshot-cleanup-daily-schedule-stacktest",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "start_time": "2019-01-11T06:00:00Z",
                            "timezone": "UTC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_template_deployment.snapshot_cleanup_schedule_temp": {
                    "type": "azurerm_template_deployment",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_cleanup_runbook",
                        "azurerm_automation_schedule.schedule",
                        "random_uuid.test"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-snapshot-sch-link",
                        "attributes": {
                            "deployment_mode": "Incremental",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-snapshot-sch-link",
                            "name": "sm-tf-tagging-test1-snapshot-sch-link",
                            "outputs.%": "0",
                            "parameters.%": "5",
                            "parameters.autAccName": "sm-tf-tagging-test1-aa",
                            "parameters.jobScheduleName": "7734e735-2125-8e19-e686-fdfc89fc3716",
                            "parameters.resGroupName": "sm-tf-tagging-test1",
                            "parameters.runbookName": "cleanup_runbook",
                            "parameters.scheduleName": "snapshot-cleanup-daily-schedule-stacktest",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "template_body": "{\"$schema\":\"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{\"autAccName\":{\"type\":\"String\"},\"jobScheduleName\":{\"type\":\"String\"},\"resGroupName\":{\"type\":\"String\"},\"runbookName\":{\"type\":\"String\"},\"scheduleName\":{\"type\":\"String\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"location\":\"westeurope\",\"name\":\"[parameters('autAccName')]\",\"properties\":{\"sku\":{\"name\":\"Basic\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"dependsOn\":[\"[concat('Microsoft.Automation/automationAccounts/', parameters('autAccName'))]\"],\"location\":\"westeurope\",\"name\":\"[concat(parameters('autAccName'), '/', parameters('jobScheduleName'))]\",\"properties\":{\"runbook\":{\"name\":\"[parameters('runbookName')]\"},\"schedule\":{\"name\":\"[parameters('scheduleName')]\"}},\"tags\":{},\"type\":\"microsoft.automation/automationAccounts/jobSchedules\"}],\"type\":\"Microsoft.Automation/automationAccounts\"}]}"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "data.local_file.snapshot_cleanup_script": {
                    "type": "local_file",
                    "depends_on": [],
                    "primary": {
                        "id": "7393afe62df64f3696485041903b9fda2640ec43",
                        "attributes": {
                            "content": "Param(\r\n    $vm1 = @{\r\n        name = \"bf-suse-01\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    $vm2 = @{\r\n        name = \"bf-suse-02\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    [System.Collections.ArrayList]\r\n    $vmList = @($vm1,$vm2)\r\n)\r\n\u003c#\r\nThis variable is used to control how many snapshots to keep. \r\nAll snapshots that are above the number specified here will be removed.\r\n#\u003e\r\n$numberOfSnapshots = 10\r\n\r\n#Region connection\r\ntry {\r\n    $RunAsConnection = Get-AutomationConnection -Name \"AzureRunAsConnection\"         \r\n\r\n    #Log into azure using run as account\r\n    Write-Output (\"Logging in to Azure...\")\r\n    Add-AzureRmAccount `\r\n        -ServicePrincipal `\r\n        -TenantId $RunAsConnection.TenantId `\r\n        -ApplicationId $RunAsConnection.ApplicationId `\r\n        -CertificateThumbprint $RunAsConnection.CertificateThumbprint \r\n\r\n    Select-AzureRmSubscription -SubscriptionId $RunAsConnection.SubscriptionID  | Write-Verbose \r\n}\r\ncatch {\r\n    if(!$RunAsConnection) {\r\n        throw \"Connection AzureRunAsConnection not found. Please create one\"\r\n    }\r\n    else {\r\n        throw $_.Exception\r\n    }\r\n}\r\n#endregion\r\n\r\n\u003c#\r\nThe main foreach loop. This is to perform the actions for all VMs (one at a time) \r\nfrom the list specified in the param section.\r\n#\u003e\r\nforeach ($vmInList in $vmList) {\r\n    #this block is used to get all of the VMs including failed over ones\r\n    $rgVar = Get-AzureRmResourceGroup -name $vmInList.resourceGroup\r\n    $uri = $rgVar.ResourceId + \"/providers/Microsoft.Compute/virtualMachines/\" + $vmInList.name\r\n    $vmObjs= Get-AzureRmVM | Where-Object { $_.id -like \"$uri*\"}\r\n\r\n    #this is used to select the most recent failed over VM\r\n    if ($vmObjs.Length -eq \"1\"){\r\n        $vm = $vmObjs\r\n    }elseif ($vmObjs.Length -gt \"1\"){\r\n        $vmObjs = $vmObjs | Sort-Object -Property Name -Descending\r\n        $vm = $vmObjs[0]\r\n    }\r\n\r\n    $vmName = $vm.Name\r\n\r\n    Write-Output \"Finding all OS snapshots...\"\r\n    #this is used to get all of the OS disk snapshots of a VM, newest first\r\n    $allVmOsDiskSnapshots = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like \"$vmName-OSdisk-*\" | `\r\n        Sort-Object name –Descending\r\n\r\n    #this is used to ignore the first X snapshots, where X is the number to keep\r\n    for ($i=$numberOfSnapshots; $i -lt $allVmOsDiskSnapshots.Count; $i++) {\r\n        $rg = $allVmOsDiskSnapshots[$i].resourceGroupName\r\n        $osSnapshotName = $allVmOsDiskSnapshots[$i].name\r\n        #parse the seconds since epoch (all snapshots taken at that time will have the same value)\r\n        $ssepoch = $osSnapshotName.Substring($osSnapshotName.Length -16)\r\n        Write-Output \"Removing snapshot: $osSnapshotName\"\r\n        #delete the snapshots that match the VM name and the seconds since epoch (basically that snapshot set)\r\n        $deletedisks = Get-AzureRmSnapshot | `\r\n        Where-Object name -Like \"*$vmName*\" | `\r\n        Where-Object name -Like \"*$ssepoch*\" | Remove-AzureRmSnapshot -Force\r\n    }\r\n}",
                            "filename": "../../../runbookCode/cleanupRunbook.ps1",
                            "id": "7393afe62df64f3696485041903b9fda2640ec43"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "random_uuid.test": {
                    "type": "random_uuid",
                    "depends_on": [],
                    "primary": {
                        "id": "7734e735-2125-8e19-e686-fdfc89fc3716",
                        "attributes": {
                            "id": "7734e735-2125-8e19-e686-fdfc89fc3716",
                            "result": "7734e735-2125-8e19-e686-fdfc89fc3716"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.random"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "Automation_Account",
                "Snapshot_Runbook"
            ],
            "outputs": {},
            "resources": {
                "azurerm_automation_runbook.snapshot_runbook": {
                    "type": "azurerm_automation_runbook",
                    "depends_on": [
                        "data.local_file.snapshot_script"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/snapshot_runbook",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "content": "Param(\r\n    $vm1 = @{\r\n        name = \"bf-suse-01\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    $vm2 = @{\r\n        name = \"bf-suse-02\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    [System.Collections.ArrayList]\r\n    $vmList = @($vm1,$vm2)\r\n)\r\n\r\n#Region connection\r\ntry {\r\n    $RunAsConnection = Get-AutomationConnection -Name \"AzureRunAsConnection\"         \r\n\r\n    #Log into azure using run as account\r\n    Write-Output (\"Logging in to Azure...\")\r\n    Add-AzureRmAccount `\r\n        -ServicePrincipal `\r\n        -TenantId $RunAsConnection.TenantId `\r\n        -ApplicationId $RunAsConnection.ApplicationId `\r\n        -CertificateThumbprint $RunAsConnection.CertificateThumbprint \r\n\r\n    Select-AzureRmSubscription -SubscriptionId $RunAsConnection.SubscriptionID  | Write-Verbose \r\n}\r\ncatch {\r\n    if(!$RunAsConnection) {\r\n        throw \"Connection AzureRunAsConnection not found. Please create one\"\r\n    }\r\n    else {\r\n        throw $_.Exception\r\n    }\r\n}\r\n#endregion\r\n\r\nforeach($vmName in $vmList){\r\n    #store date as var for use with snapshot names\r\n    Select-AzureRmSubscription -SubscriptionId $vmName.subscriptionId\r\n    $dateVar = \"$((Get-Date -UFormat \"%s.\").Substring(0,11))$(Get-Date -Format \"fffff\")\"\r\n\r\n    $rgVar = Get-azureRmResourceGroup -name $vmName.resourceGroup\r\n    $uri = $rgVar.ResourceId + \"/providers/Microsoft.Compute/virtualMachines/\" + $vmName.name\r\n\r\n    $vmObjs= Get-AzureRmVM | Where-Object { $_.id -like \"$uri*\"}\r\n\r\n    if ($vmObjs.Length -eq \"1\"){\r\n        $vm = Get-AzureRmVm  -name $vmObjs.name -ResourceGroupName $vmObjs.resourceGroupName\r\n    }elseif ($vmObjs.Length -gt \"1\"){\r\n        $vmObjs = $vmObjs | Sort-Object -Property Name -Descending\r\n        $vm = Get-AzureRmVm  -name $vmObjs[0].name -ResourceGroupName $vmObjs[0].resourceGroupName\r\n    }else{\r\n        #come back to what we should do here\r\n        echo \"pass - error\"\r\n    }\r\n\r\n    #create os disk snapshot name\r\n    $OsSnapshotName= $vm.name + \"-OSdisk-\" + $dateVar\r\n\r\n    #create a snapshot config with the managed disk from the VM os disk\r\n    $osDiskSnapshot = New-AzureRmSnapshotConfig `\r\n        -SourceUri $vm.StorageProfile.OsDisk.ManagedDisk.Id `\r\n        -Location $vm.location `\r\n        -CreateOption copy `\r\n        -SkuName Standard_ZRS\r\n\r\n    #create the actual snapshot of the os disk\r\n    New-AzureRmSnapshot `\r\n        -Snapshot $OsDiskSnapshot `\r\n        -SnapshotName $OsSnapshotName `\r\n        -ResourceGroupName $vm.ResourceGroupName\r\n\r\n    #get other data disks if attatched, could be list if more than 1\r\n    $dataDisks = (Get-AzureRmVm -name $vm.name `\r\n    -ResourceGroupName $vm.ResourceGroupName).StorageProfile.DataDisks\r\n\r\n    foreach ($dataDisk in $dataDisks){\r\n        $dataDiskSnapshotName = $vm.name + \"-\" + $dataDisk.name + \"-\" + $dateVar\r\n        #Snapshot config for each data disk\r\n        $dataDiskSnapshot = New-AzureRmSnapshotConfig `\r\n            -SourceUri $dataDisk.ManagedDisk.Id `\r\n            -Location $vm.location `\r\n            -CreateOption copy `\r\n            -SkuName Standard_ZRS\r\n\r\n        #create actual snapshots\r\n        New-AzureRmSnapshot `\r\n            -Snapshot $dataDiskSnapshot `\r\n            -SnapshotName $dataDiskSnapshotName `\r\n            -ResourceGroupName $vm.ResourceGroupName\r\n    }\r\n}",
                            "description": "Runbook that will take VM snapshots every 60 minutes",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/runbooks/snapshot_runbook",
                            "location": "westeurope",
                            "log_progress": "true",
                            "log_verbose": "true",
                            "name": "snapshot_runbook",
                            "publish_content_link.#": "1",
                            "publish_content_link.0.hash.#": "0",
                            "publish_content_link.0.uri": "https://bitbucket.org/cloudreach/ais-dentsu-improvements/src/master/dr/Prod/snapshot.ps1",
                            "publish_content_link.0.version": "",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "runbook_type": "PowerShell",
                            "tags.%": "7",
                            "tags.automation": "workinghours=0700-2000 MON-FRI:expiry=none",
                            "tags.bpcid": "FG111",
                            "tags.business": "brand=:project=:owner=:financecontact=:criticality=",
                            "tags.coreops": "support=no:backup=0000UTC:patching=0300UTC",
                            "tags.metrics": "*",
                            "tags.security": "dataclassification=internal:pii=no",
                            "tags.technical": "environment=development"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_automation_schedule.schedule.0": {
                    "type": "azurerm_automation_schedule",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-0",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "automation_account_name": "sm-tf-tagging-test1-aa",
                            "description": "This schedules the runbook to run every 60 minutes",
                            "expiry_time": "9999-12-31T23:59:00Z",
                            "frequency": "Hour",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-0",
                            "interval": "1",
                            "name": "snapshot_runbook_schedule-0",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "start_time": "2019-01-10T18:15:00Z",
                            "timezone": "UTC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_automation_schedule.schedule.1": {
                    "type": "azurerm_automation_schedule",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-1",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "automation_account_name": "sm-tf-tagging-test1-aa",
                            "description": "This schedules the runbook to run every 60 minutes",
                            "expiry_time": "9999-12-31T23:59:00Z",
                            "frequency": "Hour",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-1",
                            "interval": "1",
                            "name": "snapshot_runbook_schedule-1",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "start_time": "2019-01-10T18:30:00Z",
                            "timezone": "UTC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_automation_schedule.schedule.2": {
                    "type": "azurerm_automation_schedule",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-2",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "automation_account_name": "sm-tf-tagging-test1-aa",
                            "description": "This schedules the runbook to run every 60 minutes",
                            "expiry_time": "9999-12-31T23:59:00Z",
                            "frequency": "Hour",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-2",
                            "interval": "1",
                            "name": "snapshot_runbook_schedule-2",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "start_time": "2019-01-10T18:45:00Z",
                            "timezone": "UTC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_automation_schedule.schedule.3": {
                    "type": "azurerm_automation_schedule",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-3",
                        "attributes": {
                            "account_name": "sm-tf-tagging-test1-aa",
                            "automation_account_name": "sm-tf-tagging-test1-aa",
                            "description": "This schedules the runbook to run every 60 minutes",
                            "expiry_time": "9999-12-31T23:59:00Z",
                            "frequency": "Hour",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Automation/automationAccounts/sm-tf-tagging-test1-aa/schedules/snapshot_runbook_schedule-3",
                            "interval": "1",
                            "name": "snapshot_runbook_schedule-3",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "start_time": "2019-01-10T19:00:00Z",
                            "timezone": "UTC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_template_deployment.sch-temp.0": {
                    "type": "azurerm_template_deployment",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook",
                        "azurerm_automation_schedule.schedule",
                        "random_uuid.test.*"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-0",
                        "attributes": {
                            "deployment_mode": "Incremental",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-0",
                            "name": "sm-tf-tagging-test1-rb-sch-link-0",
                            "outputs.%": "0",
                            "parameters.%": "5",
                            "parameters.autAccName": "sm-tf-tagging-test1-aa",
                            "parameters.jobScheduleName": "40aa4d66-25fd-5144-8bc3-ac2d2ecc9800",
                            "parameters.resGroupName": "sm-tf-tagging-test1",
                            "parameters.runbookName": "snapshot_runbook",
                            "parameters.scheduleName": "snapshot_runbook_schedule-0",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "template_body": "{\"$schema\":\"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{\"autAccName\":{\"type\":\"String\"},\"jobScheduleName\":{\"type\":\"String\"},\"resGroupName\":{\"type\":\"String\"},\"runbookName\":{\"type\":\"String\"},\"scheduleName\":{\"type\":\"String\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"location\":\"westeurope\",\"name\":\"[parameters('autAccName')]\",\"properties\":{\"sku\":{\"name\":\"Basic\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"dependsOn\":[\"[concat('Microsoft.Automation/automationAccounts/', parameters('autAccName'))]\"],\"location\":\"westeurope\",\"name\":\"[concat(parameters('autAccName'), '/', parameters('jobScheduleName'))]\",\"properties\":{\"runbook\":{\"name\":\"[parameters('runbookName')]\"},\"schedule\":{\"name\":\"[parameters('scheduleName')]\"}},\"tags\":{},\"type\":\"microsoft.automation/automationAccounts/jobSchedules\"}],\"type\":\"Microsoft.Automation/automationAccounts\"}]}"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_template_deployment.sch-temp.1": {
                    "type": "azurerm_template_deployment",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook",
                        "azurerm_automation_schedule.schedule",
                        "random_uuid.test.*"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-1",
                        "attributes": {
                            "deployment_mode": "Incremental",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-1",
                            "name": "sm-tf-tagging-test1-rb-sch-link-1",
                            "outputs.%": "0",
                            "parameters.%": "5",
                            "parameters.autAccName": "sm-tf-tagging-test1-aa",
                            "parameters.jobScheduleName": "ba364264-9225-0f5a-bbc9-bcfd3067c002",
                            "parameters.resGroupName": "sm-tf-tagging-test1",
                            "parameters.runbookName": "snapshot_runbook",
                            "parameters.scheduleName": "snapshot_runbook_schedule-1",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "template_body": "{\"$schema\":\"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{\"autAccName\":{\"type\":\"String\"},\"jobScheduleName\":{\"type\":\"String\"},\"resGroupName\":{\"type\":\"String\"},\"runbookName\":{\"type\":\"String\"},\"scheduleName\":{\"type\":\"String\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"location\":\"westeurope\",\"name\":\"[parameters('autAccName')]\",\"properties\":{\"sku\":{\"name\":\"Basic\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"dependsOn\":[\"[concat('Microsoft.Automation/automationAccounts/', parameters('autAccName'))]\"],\"location\":\"westeurope\",\"name\":\"[concat(parameters('autAccName'), '/', parameters('jobScheduleName'))]\",\"properties\":{\"runbook\":{\"name\":\"[parameters('runbookName')]\"},\"schedule\":{\"name\":\"[parameters('scheduleName')]\"}},\"tags\":{},\"type\":\"microsoft.automation/automationAccounts/jobSchedules\"}],\"type\":\"Microsoft.Automation/automationAccounts\"}]}"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_template_deployment.sch-temp.2": {
                    "type": "azurerm_template_deployment",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook",
                        "azurerm_automation_schedule.schedule",
                        "random_uuid.test.*"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-2",
                        "attributes": {
                            "deployment_mode": "Incremental",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-2",
                            "name": "sm-tf-tagging-test1-rb-sch-link-2",
                            "outputs.%": "0",
                            "parameters.%": "5",
                            "parameters.autAccName": "sm-tf-tagging-test1-aa",
                            "parameters.jobScheduleName": "cc7ed47e-653c-59e2-48fb-a59b8683ee8d",
                            "parameters.resGroupName": "sm-tf-tagging-test1",
                            "parameters.runbookName": "snapshot_runbook",
                            "parameters.scheduleName": "snapshot_runbook_schedule-2",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "template_body": "{\"$schema\":\"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{\"autAccName\":{\"type\":\"String\"},\"jobScheduleName\":{\"type\":\"String\"},\"resGroupName\":{\"type\":\"String\"},\"runbookName\":{\"type\":\"String\"},\"scheduleName\":{\"type\":\"String\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"location\":\"westeurope\",\"name\":\"[parameters('autAccName')]\",\"properties\":{\"sku\":{\"name\":\"Basic\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"dependsOn\":[\"[concat('Microsoft.Automation/automationAccounts/', parameters('autAccName'))]\"],\"location\":\"westeurope\",\"name\":\"[concat(parameters('autAccName'), '/', parameters('jobScheduleName'))]\",\"properties\":{\"runbook\":{\"name\":\"[parameters('runbookName')]\"},\"schedule\":{\"name\":\"[parameters('scheduleName')]\"}},\"tags\":{},\"type\":\"microsoft.automation/automationAccounts/jobSchedules\"}],\"type\":\"Microsoft.Automation/automationAccounts\"}]}"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "azurerm_template_deployment.sch-temp.3": {
                    "type": "azurerm_template_deployment",
                    "depends_on": [
                        "azurerm_automation_runbook.snapshot_runbook",
                        "azurerm_automation_schedule.schedule",
                        "random_uuid.test.*"
                    ],
                    "primary": {
                        "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-3",
                        "attributes": {
                            "deployment_mode": "Incremental",
                            "id": "/subscriptions/23666e70-4091-4ab9-929c-9ef08446f52e/resourceGroups/sm-tf-tagging-test1/providers/Microsoft.Resources/deployments/sm-tf-tagging-test1-rb-sch-link-3",
                            "name": "sm-tf-tagging-test1-rb-sch-link-3",
                            "outputs.%": "0",
                            "parameters.%": "5",
                            "parameters.autAccName": "sm-tf-tagging-test1-aa",
                            "parameters.jobScheduleName": "80db421d-676d-5728-2c15-1d9e0d8c7ea7",
                            "parameters.resGroupName": "sm-tf-tagging-test1",
                            "parameters.runbookName": "snapshot_runbook",
                            "parameters.scheduleName": "snapshot_runbook_schedule-3",
                            "resource_group_name": "sm-tf-tagging-test1",
                            "template_body": "{\"$schema\":\"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{\"autAccName\":{\"type\":\"String\"},\"jobScheduleName\":{\"type\":\"String\"},\"resGroupName\":{\"type\":\"String\"},\"runbookName\":{\"type\":\"String\"},\"scheduleName\":{\"type\":\"String\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"location\":\"westeurope\",\"name\":\"[parameters('autAccName')]\",\"properties\":{\"sku\":{\"name\":\"Basic\"}},\"resources\":[{\"apiVersion\":\"2015-10-31\",\"dependsOn\":[\"[concat('Microsoft.Automation/automationAccounts/', parameters('autAccName'))]\"],\"location\":\"westeurope\",\"name\":\"[concat(parameters('autAccName'), '/', parameters('jobScheduleName'))]\",\"properties\":{\"runbook\":{\"name\":\"[parameters('runbookName')]\"},\"schedule\":{\"name\":\"[parameters('scheduleName')]\"}},\"tags\":{},\"type\":\"microsoft.automation/automationAccounts/jobSchedules\"}],\"type\":\"Microsoft.Automation/automationAccounts\"}]}"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.azurerm"
                },
                "data.local_file.snapshot_script": {
                    "type": "local_file",
                    "depends_on": [],
                    "primary": {
                        "id": "1142ecc3d6edd26a1552ed2f0620d2342d0daf17",
                        "attributes": {
                            "content": "Param(\r\n    $vm1 = @{\r\n        name = \"bf-suse-01\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    $vm2 = @{\r\n        name = \"bf-suse-02\"\r\n        resourceGroup = \"bf-dr-dan-eu\"\r\n        subscriptionId = \"23666e70-4091-4ab9-929c-9ef08446f52e\"\r\n        # saName = \"saName\"\r\n    },\r\n    [System.Collections.ArrayList]\r\n    $vmList = @($vm1,$vm2)\r\n)\r\n\r\n#Region connection\r\ntry {\r\n    $RunAsConnection = Get-AutomationConnection -Name \"AzureRunAsConnection\"         \r\n\r\n    #Log into azure using run as account\r\n    Write-Output (\"Logging in to Azure...\")\r\n    Add-AzureRmAccount `\r\n        -ServicePrincipal `\r\n        -TenantId $RunAsConnection.TenantId `\r\n        -ApplicationId $RunAsConnection.ApplicationId `\r\n        -CertificateThumbprint $RunAsConnection.CertificateThumbprint \r\n\r\n    Select-AzureRmSubscription -SubscriptionId $RunAsConnection.SubscriptionID  | Write-Verbose \r\n}\r\ncatch {\r\n    if(!$RunAsConnection) {\r\n        throw \"Connection AzureRunAsConnection not found. Please create one\"\r\n    }\r\n    else {\r\n        throw $_.Exception\r\n    }\r\n}\r\n#endregion\r\n\r\nforeach($vmName in $vmList){\r\n    #store date as var for use with snapshot names\r\n    Select-AzureRmSubscription -SubscriptionId $vmName.subscriptionId\r\n    $dateVar = \"$((Get-Date -UFormat \"%s.\").Substring(0,11))$(Get-Date -Format \"fffff\")\"\r\n\r\n    $rgVar = Get-azureRmResourceGroup -name $vmName.resourceGroup\r\n    $uri = $rgVar.ResourceId + \"/providers/Microsoft.Compute/virtualMachines/\" + $vmName.name\r\n\r\n    $vmObjs= Get-AzureRmVM | Where-Object { $_.id -like \"$uri*\"}\r\n\r\n    if ($vmObjs.Length -eq \"1\"){\r\n        $vm = Get-AzureRmVm  -name $vmObjs.name -ResourceGroupName $vmObjs.resourceGroupName\r\n    }elseif ($vmObjs.Length -gt \"1\"){\r\n        $vmObjs = $vmObjs | Sort-Object -Property Name -Descending\r\n        $vm = Get-AzureRmVm  -name $vmObjs[0].name -ResourceGroupName $vmObjs[0].resourceGroupName\r\n    }else{\r\n        #come back to what we should do here\r\n        echo \"pass - error\"\r\n    }\r\n\r\n    #create os disk snapshot name\r\n    $OsSnapshotName= $vm.name + \"-OSdisk-\" + $dateVar\r\n\r\n    #create a snapshot config with the managed disk from the VM os disk\r\n    $osDiskSnapshot = New-AzureRmSnapshotConfig `\r\n        -SourceUri $vm.StorageProfile.OsDisk.ManagedDisk.Id `\r\n        -Location $vm.location `\r\n        -CreateOption copy `\r\n        -SkuName Standard_ZRS\r\n\r\n    #create the actual snapshot of the os disk\r\n    New-AzureRmSnapshot `\r\n        -Snapshot $OsDiskSnapshot `\r\n        -SnapshotName $OsSnapshotName `\r\n        -ResourceGroupName $vm.ResourceGroupName\r\n\r\n    #get other data disks if attatched, could be list if more than 1\r\n    $dataDisks = (Get-AzureRmVm -name $vm.name `\r\n    -ResourceGroupName $vm.ResourceGroupName).StorageProfile.DataDisks\r\n\r\n    foreach ($dataDisk in $dataDisks){\r\n        $dataDiskSnapshotName = $vm.name + \"-\" + $dataDisk.name + \"-\" + $dateVar\r\n        #Snapshot config for each data disk\r\n        $dataDiskSnapshot = New-AzureRmSnapshotConfig `\r\n            -SourceUri $dataDisk.ManagedDisk.Id `\r\n            -Location $vm.location `\r\n            -CreateOption copy `\r\n            -SkuName Standard_ZRS\r\n\r\n        #create actual snapshots\r\n        New-AzureRmSnapshot `\r\n            -Snapshot $dataDiskSnapshot `\r\n            -SnapshotName $dataDiskSnapshotName `\r\n            -ResourceGroupName $vm.ResourceGroupName\r\n    }\r\n}",
                            "filename": "../../../runbookCode/snapshotRunbook.ps1",
                            "id": "1142ecc3d6edd26a1552ed2f0620d2342d0daf17"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "random_uuid.test.0": {
                    "type": "random_uuid",
                    "depends_on": [],
                    "primary": {
                        "id": "40aa4d66-25fd-5144-8bc3-ac2d2ecc9800",
                        "attributes": {
                            "id": "40aa4d66-25fd-5144-8bc3-ac2d2ecc9800",
                            "result": "40aa4d66-25fd-5144-8bc3-ac2d2ecc9800"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.random"
                },
                "random_uuid.test.1": {
                    "type": "random_uuid",
                    "depends_on": [],
                    "primary": {
                        "id": "ba364264-9225-0f5a-bbc9-bcfd3067c002",
                        "attributes": {
                            "id": "ba364264-9225-0f5a-bbc9-bcfd3067c002",
                            "result": "ba364264-9225-0f5a-bbc9-bcfd3067c002"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.random"
                },
                "random_uuid.test.2": {
                    "type": "random_uuid",
                    "depends_on": [],
                    "primary": {
                        "id": "cc7ed47e-653c-59e2-48fb-a59b8683ee8d",
                        "attributes": {
                            "id": "cc7ed47e-653c-59e2-48fb-a59b8683ee8d",
                            "result": "cc7ed47e-653c-59e2-48fb-a59b8683ee8d"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.random"
                },
                "random_uuid.test.3": {
                    "type": "random_uuid",
                    "depends_on": [],
                    "primary": {
                        "id": "80db421d-676d-5728-2c15-1d9e0d8c7ea7",
                        "attributes": {
                            "id": "80db421d-676d-5728-2c15-1d9e0d8c7ea7",
                            "result": "80db421d-676d-5728-2c15-1d9e0d8c7ea7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.random"
                }
            },
            "depends_on": []
        }
    ]
}
